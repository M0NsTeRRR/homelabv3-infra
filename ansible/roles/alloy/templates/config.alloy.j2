#jinja2: lstrip_blocks: "True"
http {
        tls {
                cert_file        = "/etc/alloy/ssl/{{ alloy_cert_filename }}"
                key_file         = "/etc/alloy/ssl/{{ alloy_key_filename }}"
                client_ca_file   = "/etc/alloy/ssl/ca.crt"
                client_auth_type = "RequireAndVerifyClientCert"
        }
}

logging {
        level  = "info"
        format = "logfmt"
}

prometheus.exporter.unix "node" { }

prometheus.remote_write "victoriametrics" {
        endpoint {
                url = "{{ alloy_metric_prometheus_url }}"
          
                write_relabel_config {
                        target_label  = "instance"
                        replacement = "{{ alloy_node_name }}"
                }
        }
}

otelcol.exporter.otlphttp "log" {
        client {
                endpoint = "{{ alloy_log_otlp_url }}"
        }
}

prometheus.scrape "node_exporter" {
        targets = prometheus.exporter.unix.node.targets
        job_name     = "node-exporter"
        forward_to = [prometheus.relabel.node_exporter.receiver]
}

prometheus.relabel "node_exporter" {
        rule {
                replacement   = "node-exporter"
                target_label  = "job"
        }
        forward_to = [prometheus.remote_write.victoriametrics.receiver]
}

{%- for scrape in alloy_extra_scrape %}
prometheus.scrape "{{ scrape.name }}" {
        targets = [
                {% for target in scrape.targets %}
                {"__address__" = "{{ target.address }}"},
                {% endfor %}
        ]

        job_name     = "{{ scrape.name }}"
        {% if scrape.metrics_path is defined %}
        metrics_path = "{{ scrape.metrics_path }}"
        {% else %}
        metrics_path = "/metrics"
        {% endif %}

        forward_to   = [prometheus.remote_write.victoriametrics.receiver]

        {% if scrape.basic_auth is defined %}
        basic_auth {
                username = "{{ scrape.basic_auth.username }}"
                password = "{{ scrape.basic_auth.password }}"
        }
        {% endif %}

        scrape_interval = "30s"
        scrape_timeout  = "5s"
}
{%- endfor %}

loki.relabel "journal" {
        forward_to = []

        rule {
                source_labels = ["__journal__systemd_unit"]
                target_label  = "unit"
        }
        rule {
                source_labels = ["__journal__boot_id"]
                target_label  = "boot_id"
        }
        rule {
                source_labels = ["__journal__transport"]
                target_label  = "transport"
        }
        rule {
                source_labels = ["__journal_priority_keyword"]
                target_label  = "level"
        }
        rule {
                replacement   = "{{ alloy_node_name }}"
                target_label  = "instance"
        }
}

loki.source.journal "read" {
        forward_to = [
                otelcol.receiver.loki.converter.receiver,
        ]
        relabel_rules = loki.relabel.journal.rules
        labels = {
                "job" = "journal",
        }
}

otelcol.receiver.loki "converter" {
        output {
                logs = [otelcol.exporter.otlphttp.log.input]
        }
}
