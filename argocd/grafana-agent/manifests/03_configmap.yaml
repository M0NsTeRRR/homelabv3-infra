---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-agent-config
data:
  config: |
    logging {
      level  = "info"
      format = "logfmt"
    }

    // Kubernetes secrets
    remote.kubernetes.secret "credentials" {
      namespace = "grafana-agent"
      name = "grafana-agent-vault"
    }

    // remote write
    prometheus.remote_write "default" {
      endpoint {
        url = "http://grafana-mimir-gateway.grafana-mimir.svc.cluster.local/api/v1/push"
      }
    }

    loki.write "local" {
      endpoint {
        url = "http://grafana-loki-loki-distributed-gateway.grafana-loki.svc.cluster.local/loki/api/v1/push"
      }
    }

    // prometheus rules
    mimir.rules.kubernetes "rules" {
      address = "http://grafana-mimir-gateway.grafana-mimir.svc.cluster.local"
    }

    // discovery
    prometheus.exporter.self "agent" {}

    discovery.kubernetes "ingresses" {
      role = "ingress"
    }

    discovery.kubernetes "pods" {
      role = "pod"
    }

    discovery.relabel "ingresses" {
      targets = discovery.kubernetes.ingresses.targets

      rule {
        source_labels = ["__address__"]
        target_label  = "__param_target"
        action        = "replace"
      }

      rule {
        source_labels = ["__param_target"]
        target_label  = "instance"
        action        = "replace"
      }

      rule {
        source_labels = ["__param_target"]
        target_label  = "target"
        action        = "replace"
      }

      rule {
        replacement = "http_2xx"
        target_label  = "__param_module"
      }

      rule {
        replacement = "/probe"
        target_label  = "__metrics_path__"
      }

      rule {
        replacement = "blackbox-exporter-prometheus-blackbox-exporter.blackbox-exporter.svc:9115"
        target_label  = "__address__"
      }
    }

    discovery.relabel "logs" {
      targets = discovery.kubernetes.pods.targets

      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        target_label  = "namespace"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_container_name"]
        target_label  = "container"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        target_label  = "pod"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_node_name"]
        action = "keep"
        regex = env("HOSTNAME")
      }

      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        action = "drop"
        regex = "grafana-agent"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
        target_label  = "__path__"
        separator     = "/"
        replacement   = "/var/log/pods/*$1/*.log"
      }
    }

    // prometheus scrape
    prometheus.scrape "agent" {
      targets    = prometheus.exporter.self.agent.targets
      forward_to = [prometheus.remote_write.default.receiver]
      clustering {
        enabled = true
      }
      scrape_interval = "30s"
      scrape_timeout  = "5s"
    }

    prometheus.scrape "pdns_auth" {
      targets = [
        {"__scheme__" = "https", "__address__" = "dns1.unicornafk.fr", "instance" = "dns1.unicornafk.fr"},
        {"__scheme__" = "https", "__address__" = "dns2.unicornafk.fr", "instance" = "dns2.unicornafk.fr"},
      ]
      metrics_path    = "/auth/metrics"
      forward_to = [prometheus.remote_write.default.receiver]
      basic_auth {
        username = nonsensitive(remote.kubernetes.secret.credentials.data["PDNS_AUTH_USERNAME"])
        password = remote.kubernetes.secret.credentials.data["PDNS_AUTH_PASSWORD"]
      }
      tls_config {
        cert_file = "/mtls/client/tls.crt"
        key_file  = "/mtls/client/tls.key"
      }
      clustering {
        enabled = true
      }
      scrape_interval = "30s"
      scrape_timeout  = "5s"
    }

    prometheus.scrape "pdns_rec" {
      targets = [
        {"__scheme__" = "https", "__address__" = "dns1.unicornafk.fr", "instance" = "dns1.unicornafk.fr"},
        {"__scheme__" = "https", "__address__" = "dns2.unicornafk.fr", "instance" = "dns2.unicornafk.fr"},
      ]
      metrics_path    = "/rec/metrics"
      forward_to = [prometheus.remote_write.default.receiver]
      basic_auth {
        username = nonsensitive(remote.kubernetes.secret.credentials.data["PDNS_REC_USERNAME"])
        password = remote.kubernetes.secret.credentials.data["PDNS_REC_PASSWORD"]
      }
      tls_config {
        cert_file = "/mtls/client/tls.crt"
        key_file  = "/mtls/client/tls.key"
      }
      clustering {
        enabled = true
      }
      scrape_interval = "30s"
      scrape_timeout  = "5s"
    }

    prometheus.scrape "dnsdist" {
      targets = [
        {"__scheme__" = "https", "__address__" = "dns1.unicornafk.fr", "instance" = "dns1.unicornafk.fr"},
        {"__scheme__" = "https", "__address__" = "dns2.unicornafk.fr", "instance" = "dns2.unicornafk.fr"},
      ]
      metrics_path    = "/dnsdist/metrics"
      forward_to = [prometheus.remote_write.default.receiver]
      basic_auth {
        username = nonsensitive(remote.kubernetes.secret.credentials.data["DNSDIST_USERNAME"])
        password = remote.kubernetes.secret.credentials.data["DNSDIST_PASSWORD"]
      }
      tls_config {
        cert_file = "/mtls/client/tls.crt"
        key_file  = "/mtls/client/tls.key"
      }
      clustering {
        enabled = true
      }
      scrape_interval = "30s"
      scrape_timeout  = "5s"
    }

    prometheus.scrape "node_exporter" {
      targets = [
        {"__scheme__" = "https", "__address__" = "dns1.unicornafk.fr:9100", "instance" = "dns1.unicornafk.fr"},
        {"__scheme__" = "https", "__address__" = "dns2.unicornafk.fr:9100", "instance" = "dns2.unicornafk.fr"},
        {"__scheme__" = "https", "__address__" = "dhcp1.unicornafk.fr:9100", "instance" = "dhcp1.unicornafk.fr"},
        {"__scheme__" = "https", "__address__" = "dhcp2.unicornafk.fr:9100", "instance" = "dhcp2.unicornafk.fr"},
      ]
      job_name     = "node-exporter"
      metrics_path = "/metrics"
      forward_to   = [prometheus.remote_write.default.receiver]
      tls_config {
        cert_file = "/mtls/client/tls.crt"
        key_file  = "/mtls/client/tls.key"
      }
      clustering {
        enabled = true
      }
      scrape_interval = "30s"
      scrape_timeout  = "5s"
    }

    prometheus.scrape "blackbox_ingresses" {
      targets    = discovery.relabel.ingresses.output
      forward_to = [prometheus.remote_write.default.receiver]
      clustering {
        enabled = true
      }
      scrape_interval = "30s"
      scrape_timeout  = "5s"
    }

    prometheus.operator.servicemonitors "servicemonitors" {
      forward_to = [prometheus.remote_write.default.receiver]
      clustering {
        enabled = true
      }
      scrape {
        default_scrape_interval = "30s"
        default_scrape_timeout  = "5s"
      }
    }

    prometheus.operator.podmonitors "podmonitors" {
      forward_to = [prometheus.remote_write.default.receiver]
      clustering {
        enabled = true
      }
      scrape {
        default_scrape_interval = "30s"
        default_scrape_timeout  = "5s"
      }
    }

    // loki source
    loki.source.journal "read"  {
      forward_to    = [loki.write.local.receiver]
    }

    loki.source.kubernetes "pods" {
      targets    = discovery.relabel.logs.output
      forward_to = [loki.write.local.receiver]
      clustering {
        enabled = true
      }
    }

    loki.source.kubernetes_events "events" {
      log_format = "json"
      forward_to = [loki.write.local.receiver]
    }
