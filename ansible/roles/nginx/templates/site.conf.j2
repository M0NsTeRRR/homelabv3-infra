#jinja2: lstrip_blocks: "True"
server {
  listen {{ item.ssl_port }} ssl http2;
  listen [::]:{{ item.ssl_port }} ssl http2;

  server_name {{ item.server_name }}{% if item.additional_server_name is defined %}, {% for additional_server_name in item.additional_server_name %}{{ additional_server_name }}{% if not loop.last %}, {% endif %}{% endfor %}{% endif %};

  ssl_client_certificate /etc/nginx/ssl/ca.crt;
  ssl_certificate /etc/nginx/ssl/{{ item.server_name }}-fullchain.crt;
  ssl_certificate_key /etc/nginx/ssl/{{ item.server_name }}.key;
  {% if item.ssl_verify_client %}
  ssl_verify_client {{ item.ssl_verify_client }};
  {% endif %}

  add_header X-Frame-Options "SAMEORIGIN" always;
  add_header X-XSS-Protection "1; mode=block" always;
  add_header X-Content-Type-Options "nosniff" always;
  add_header Referrer-Policy "strict-origin-when-cross-origin" always;
  {% if item.enable_content_security %}
  add_header Content-Security-Policy "default-src 'self'" always;
  {% endif %}
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
  add_header Permissions-Policy "accelerometer=(), ambient-light-sensor=(), autoplay=(), battery=(), camera=(), cross-origin-isolated=(), display-capture=(), document-domain=(), encrypted-media=(), execution-while-not-rendered=(), execution-while-out-of-viewport=(), fullscreen=(), geolocation=(), gyroscope=(), keyboard-map=(), magnetometer=(), microphone=(), midi=(), navigation-override=(), payment=(), picture-in-picture=(), publickey-credentials-get=(), screen-wake-lock=(), sync-xhr=(), usb=(), web-share=(), xr-spatial-tracking=(), clipboard-read=(), clipboard-write=(), gamepad=(), speaker-selection=(), conversion-measurement=(), focus-without-user-activation=(), hid=(), idle-detection=(), interest-cohort=(), serial=(), sync-script=(), trust-token-redemption=(), window-placement=(), vertical-scroll=()";
  add_header X-Permitted-Cross-Domain-Policies "none" always;
  add_header Cross-Origin-Embedder-Policy "same-origin" always;
  add_header Cross-Origin-Opener-Policy "same-origin" always;
  add_header Cross-Origin-Resource-Policy "same-origin" always;
  add_header Set-Cookie "Path=/; HttpOnly; Secure";

  access_log /var/log/nginx/{{ item.server_name }}.access.log;
  error_log /var/log/nginx/{{ item.server_name }}.error.log warn;

  {% for location in item.locations %}
  location {{ location.location }} {
    {% if location.ssl_client_verify is defined and location.ssl_client_verify %}
    if ($ssl_client_verify != "SUCCESS") { return 403; }
    {% endif %}
    {% if location.proxy_pass is defined %}
    proxy_set_header        Host $host;
    proxy_set_header        X-Real-IP $remote_addr;
    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header        X-Forwarded-Proto $scheme;

    proxy_pass              {{ location.proxy_pass }};
    proxy_read_timeout      90;
    {% endif %}
    {% if location.alias is defined %}
    alias {{ location.alias }};
    autoindex off;
    {% endif %}
    {% if location.proxy_headers is defined %}
    {% for headerName, headerValue in location.proxy_headers.items() %}
    proxy_set_header        {{ headerName }} {{ headerValue }};
    {% endfor %}
    {% endif %}

    {% if location.auth_basic is defined %}
    auth_basic              "Authentification required for this area";
    auth_basic_user_file    /etc/nginx/basic_auth/.{{ location.auth_basic }};
    {% endif %}
  }
  {% endfor %}
}

{% if item.http_redirection %}
server {
  listen 80;
  listen [::]:80;

  server_name {{ item.server_name }};

  {% if nginx_acme_local_folder is defined %}
  location /.well-known/acme-challenge {
    root {{ nginx_acme_local_folder }};
  }
  {% endif %}

  location / {
    return 301 https://$server_name$request_uri;
  }
}
{% endif %}