{
  $schema: 'https://docs.renovatebot.com/renovate-schema.json',
  extends: [
    'config:base',
    ':dependencyDashboard',
  ],
  dependencyDashboardAutoclose: true,
  automergeType: 'pr',
  platformAutomerge: true,
  rebaseWhen: 'conflicted',
  "timezone": "Europe/Paris",
  "schedule": [
    "before 9pm on friday"
  ],
  prConcurrentLimit: 0,
  prHourlyLimit: 0,
  terragrunt: {
    enabled: false
  },
  labels: [
    'dependencies',
  ],
  vulnerabilityAlerts: {
    enabled: true,
    labels: [
      'security',
    ],
  },
  patch: {
    automerge: true,
  },
  pin: {
    automerge: true,
  },
  regexManagers: [
    // VSCode devcontainer.json features version
    {
      fileMatch: ["devcontainer.json$"],
      matchStrings: ['datasource=(?<datasource>\\S*)[\\s]+depName=(?<depName>\\S*)[\\s]+"\\w+":[\\s]+"(?<currentValue>[a-zA-Z0-9-_.]+)"'],
      versioningTemplate: 'regex:^v(?<major>\\d+)\\.(?<minor>\\d+)\\.?(?<patch>\\d+)?-?(?<compatibility>\\S+)?$',
    },
    // grafana dashboards
    {
      fileMatch: ["\\.ya?ml$"],
      matchStrings: [
        "\\s+(?<depName>\\S*):\n\\s+gnetId:\\s+(?<packageName>\\S*)\n\\s+revision:\\s+(?<currentValue>\\S*)",
        "\\s+(?<depName>\\S*):\n\\s+revision:\\s+(?<currentValue>\\S*)\n\\s+gnetId:\\s+(?<packageName>\\S*)"
      ],
      versioningTemplate: "regex:^(?<major>\\d+)$",
      datasourceTemplate: "custom.grafana-dashboards"
    },
    // match packer and plugin version
    {
      fileMatch: [
        '\\.pkr\\.hcl',
      ],
      matchStrings: [
        'required_version[\\s]+=[\\s]+"=?(?<currentValue>\\S*)"',
        'source[\\s]+=[\\s]+"github.com/(?<depName>\\S*)"[\\s]+version[\\s]+=[\\s]+"(?<currentValue>\\S*)"',
        'version[\\s]+=[\\s]+"(?<currentValue>\\S*)[\\s]+source[\\s]+=[\\s]+"github.com/(?<depName>\\S*)"',
      ],
      datasourceTemplate: 'github-tags',
      depNameTemplate: '{{#if depName}}{{#if (containsString depName "hashicorp/")}}{{{replace "hashicorp/" "hashicorp/packer-plugin-" depName}}}{{else}}{{{depName}}}{{/if}}{{else}}hashicorp/packer{{/if}}',
    },
    // match distribution version
    {
      fileMatch: [
        '\\.pkr\\.hcl',
      ],
      matchStrings: [
        '(distribution).+\r?\n.+\r?\n.+"(?<depName>\\S*)"[\\S\\s]+(version).+\r?\n.+\r?\n.+"(?<currentValue>\\S*)"',
        '(version).+\r?\n.+\r?\n.+"(?<currentValue>\\S*)"[\\S\\s]+(distribution).+\r?\n.+\r?\n.+"(?<depName>\\S*)"'
      ],
      datasourceTemplate: 'docker',
    },
    // match terraform and terragrunt version
    {
      fileMatch: [
        '(^|/)terragrunt\\.hcl$',
      ],
      matchStrings: [
        '(?<depName>\\S*)_version_constraint\\s+=\\s+"(?<currentValue>\\S*)"',
      ],
      datasourceTemplate: 'github-tags',
      depNameTemplate: '{{#if (containsString depName "terragrunt")}}gruntwork-io/terragrunt{{else}}hashicorp/terraform{{/if}}',
    },
    // match terraform plugin version
    {
      fileMatch: [
        '(^|/)terragrunt\\.hcl$',
      ],
      matchStrings: [
        'source[\\s]+=[\\s]+"(?<depName>\\S*)"[\\s]+version[\\s]+=[\\s]+"=?(?<currentValue>\\S*)"',
        'version[\\s]+=[\\s]+"=?(?<currentValue>\\S*)"[\\s]+source[\\s]+=[\\s]+"(?<depName>\\S*)"[\\s]',
      ],
      datasourceTemplate: 'terraform-provider',
    },
    // match min_ansible_version in ansible role meta
    {
      fileMatch: [
        '(^|/)roles\\S+meta/\\S+\\.ya?ml',
      ],
      matchStrings: [
        'min_ansible_version:\\s+"(?<currentValue>\\S*)"',
      ],
      depNameTemplate: 'ansible-core',
      datasourceTemplate: 'pypi',
    },
    // match program version in ansible defaults 
    {
      fileMatch: [
        '(^|/)roles\\S+defaults/\\S+\\.ya?ml',
      ],
      matchStrings: [
        'datasource=(?<datasource>\\S*)[\\s]+depName=(?<depName>\\S*)([\\s]+registryUrl=(?<registryUrl>\\S*))?\r?\n[\\S]+\\s"?(?<currentValue>[a-zA-Z0-9-_.+]+)"?',
      ],
    },
    // match github yaml in kustomization file
    {
      fileMatch: [
        "(^|/)kustomization.ya?ml$"
      ],
      matchStrings: [
        "https:\/\/raw\\.githubusercontent\\.com\/(?<depName>[^\/]*\/[^\/]*)\/(?<currentValue>.*?)\/",
        "https:\/\/github\\.com\/(?<depName>[^\/]*\/[^\/]*)\/releases\/download\/.*(?<currentValue>\\d+.\\d+.\\d+)\/"
      ],
      datasourceTemplate: "github-tags",
    },
  ],
  packageRules: [
    // group ansible version in one PR
    {
      matchDatasources: [
        'pypi',
      ],
      matchDepPatterns: [
        'ansible/ansible',
        'ansible-core',
        'ansible/ansible-lint'
      ],
      groupName: 'ansible version',
    },
    // match github yaml in kustomization file
    {
      matchFileNames: [
        "**/kustomization.yaml",
        "**/kustomization.yml",
      ],
      matchDatasources: ["github-tags"],
      versioning: 'regex:^v?(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)',
    },
    // handle packer, packer plugin, terraform, terragrunt versions (not terraform modules) to add "v" char in front of semver
    {
      matchPackageNames: [
        'gruntwork-io/terragrunt',
        'hashicorp/terraform',
        'hashicorp/packer',
      ],
      matchPackagePatterns: [
        '^hashicorp/packer-plugin-'
      ],
      matchDepNames: [
        'gruntwork-io/terragrunt',
        'hashicorp/terraform',
        'hashicorp/packer',
      ],
      matchDepPatterns: [
        '^hashicorp/packer-plugin-'
      ],
      versioning: 'regex:^v?(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)',
    },
    // handle k3s github tag that don't follow semver
    {
      matchPackageNames: [
        'k3s-io/k3s',
      ],  
      matchDepNames: [
        'k3s-io/k3s',
      ],
      ignoreUnstable: false,
      versioning: 'regex:^v?(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)(?<compatibility>\\+k3s)(?<build>\\d+)',
    },
    // handle external-dns github tag that don't follow semver
    {
      matchPackageNames: [
        'kubernetes-sigs/external-dns',
      ],
      matchDepNames: [
        'kubernetes-sigs/external-dns',
      ],
      matchCurrentValue: '/^external-dns-helm-chart/',
      versioning: 'regex:^external-dns-helm-chart-(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)',
    },
    // handle argo-cd helm github tag that don't follow semver
    {
      matchPackageNames: [
        'argoproj/argo-helm',
      ],  
      matchDepNames: [
        'argoproj/argo-helm',
      ],
      versioning: 'regex:^argo-cd-(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)',
    },
    // handle prometheus operator tag that don't follow semver
    {
      matchPackageNames: [
        'prometheus-community/helm-charts',
      ],
      matchDepNames: [
        'prometheus-community/helm-charts',
      ],
      versioning: 'regex:^prometheus-operator-crds-(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)$',
    },
    // handle kubectl tag that don't follow semver
    {
      matchPackageNames: [
        'kubernetes/kubectl',
      ],
      matchDepNames: [
        'kubernetes/kubectl',
      ],
      versioning: 'regex:^kubernetes-(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)$',
    },
    // handle pdns auth github tag that don't follow semver
    {
      matchPackageNames: [
        'PowerDNS/pdns',
      ],
      matchDepNames: [
        'PowerDNS/pdns',
      ],
      matchCurrentValue: '/^auth/',
      versioning: 'regex:^auth-(?<major>\\d+)\\.(?<minor>\\d+)\\.?(?<patch>\\d+)?-?(?<compatibility>\\S+)?$',
    },
    // handle pdns rec github tag that don't follow semver
    {
      matchPackageNames: [
        'PowerDNS/pdns',
      ],
      matchDepNames: [
        'PowerDNS/pdns',
      ],
      matchCurrentValue: '/^rec/',
      versioning: 'regex:^rec-(?<major>\\d+)\\.(?<minor>\\d+)\\.?(?<patch>\\d+)?-?(?<compatibility>\\S+)?$',
    },
    // handle pdns dnsdist github tag that don't follow semver
    {
      matchPackageNames: [
        'PowerDNS/pdns',
      ],
      matchDepNames: [
        'PowerDNS/pdns',
      ],
      matchCurrentValue: '/^dnsdist/',
      versioning: 'regex:^dnsdist-(?<major>\\d+)\\.(?<minor>\\d+)\\.?(?<patch>\\d+)?-?(?<compatibility>\\S+)?$',
    },
    // handle kea dhcp tag that don't follow semver
    {
      matchPackageNames: [
        'projects/kea',
      ],
      matchDepNames: [
        'projects/kea',
      ],
      versioning: 'regex:^Kea-(?<major>\\d+)\\.(?<minor>\\d+)(\\.(\\d+))?$',
    },
  ],
  "customDatasources": {
    "grafana-dashboards": {
      "defaultRegistryUrlTemplate": "https://grafana.com/api/dashboards/{{packageName}}",
      "format": "json",
      "transformTemplates": [
        "{\"releases\":[{\"version\": $string(revision)}]}"
      ]
    }
  }
}