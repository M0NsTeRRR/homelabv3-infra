---
- name: Generate client and server certificates
  hosts: localhost
  gather_facts: false
  connection: local
  vars:
    certs_dir: "../../ssl/"
  vars_prompt:
    - name: "signing_certificate"
      prompt: "Signing intermediate certificate to use ? (eg. kubernetes)"
      private: false
    - name: "subject_alt_name"
      prompt: "Subject alt name ? (eg. DNS:www.unicornafk.fr,DNS:test.unicornafk.fr)"
      private: false
    - name: "ownca_not_after"
      prompt: "Expiration date ?"
      default: "+365d"
      private: false
    - name: "reverse_ipv4"
      prompt: "Add IPv4 reverse to subject alt name ?"
      default: "false"
      private: false
    - name: "reverse_ipv6"
      prompt: "Add IPv6 reverse to subject alt name ?"
      default: "false"
      private: false
    - name: "client_key_usage"
      prompt: "CSR client key usage ? (eg. nonRepudiation,digitalSignature,keyEncipherment,dataEncipherment)"
      private: false
    - name: "client_extended_key_usage"
      prompt: "CSR client extended key usage ? (eg. serverAuth,clientAuth)"
      private: false
  tasks:
    - name: Set subject_alt_name and cast boolean variable
      ansible.builtin.set_fact:
        reverse_ipv4: "{{ ((reverse_ipv4 | lower) == 'true') | bool }}"
        reverse_ipv6: "{{ ((reverse_ipv6 | lower) == 'true') | bool }}"
        subject_alt_name: "{{ subject_alt_name | split(',') }}"
        client_key_usage: "{% if client_key_usage | length > 0 %}{{ client_key_usage | split(',') }}{% else %}{{ [] }}{% endif %}"
        client_extended_key_usage: "{% if client_extended_key_usage | length > 0 %}{{ client_extended_key_usage | split(',') }}{% else %}{{ [] }}{% endif %}"

    - name: Set common_name
      ansible.builtin.set_fact:
        common_name: "{{ (subject_alt_name[0] | split(':'))[1] }}"

    - name: Add reverse ipv4 to subject_alt_name
      ansible.builtin.set_fact:
        subject_alt_name: "{{ subject_alt_name + ['IP:' + lookup('community.general.dig', common_name)] }}"
      when: reverse_ipv4

    - name: Add reverse ipv6 to subject_alt_name
      ansible.builtin.set_fact:
        subject_alt_name: "{{ subject_alt_name + ['IP:' + lookup('community.general.dig', common_name, 'qtype=AAAA')] }}"
      when: reverse_ipv6

    - name: Generate cert authority OpenSSL private key
      community.crypto.openssl_privatekey:
        path: "{{ certs_dir }}{{ organization }}.key"
        passphrase: "{{ ca_private_passphrase }}"
        cipher: "auto"
        regenerate: "never"

    - name: Generate cert authority OpenSSL Certificate Signing Request
      community.crypto.openssl_csr:
        path: "{{ certs_dir }}{{ organization }}.csr"
        privatekey_path: "{{ certs_dir }}{{ organization }}.key"
        privatekey_passphrase: "{{ ca_private_passphrase }}"
        country_name: "{{ country }}"
        organization_name: "{{ organization }}"
        email_address: "{{ admin_email }}"
        common_name: "{{ organization }}"
        use_common_name_for_san: false
        basic_constraints:
          - CA:TRUE
        basic_constraints_critical: true
        key_usage:
          - keyCertSign
        key_usage_critical: true

    - name: Generate cert authority OpenSSL certificate
      community.crypto.x509_certificate:
        path: "{{ certs_dir }}{{ organization }}.crt"
        privatekey_path: "{{ certs_dir }}{{ organization }}.key"
        privatekey_passphrase: "{{ ca_private_passphrase }}"
        csr_path: "{{ certs_dir }}{{ organization }}.csr"
        provider: selfsigned

    - name: "Create folder intermediate/{{ signing_certificate }}"
      ansible.builtin.file:
        state: directory
        name: "{{ certs_dir }}intermediate/{{ signing_certificate }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0750'

    - name: Generate cert intermediate authority OpenSSL private key
      community.crypto.openssl_privatekey:
        path: "{{ certs_dir }}intermediate/{{ signing_certificate }}/{{ signing_certificate }}.key"
        passphrase: "{{ ca_private_passphrase }}"
        cipher: "auto"
        regenerate: "never"

    - name: Generate cert intermediate authority OpenSSL Certificate Signing Request
      community.crypto.openssl_csr:
        path: "{{ certs_dir }}intermediate/{{ signing_certificate }}/{{ signing_certificate }}.csr"
        privatekey_path: "{{ certs_dir }}intermediate/{{ signing_certificate }}/{{ signing_certificate }}.key"
        privatekey_passphrase: "{{ ca_private_passphrase }}"
        country_name: "{{ country }}"
        organization_name: "{{ signing_certificate }}.{{ organization }}"
        email_address: "{{ admin_email }}"
        common_name: "{{ signing_certificate }}.{{ organization }}"
        use_common_name_for_san: false
        basic_constraints:
          - CA:TRUE
        basic_constraints_critical: true
        key_usage:
          - digitalSignature
          - cRLSign
          - keyCertSign
        key_usage_critical: true

    - name: Generate cert intermediate authority OpenSSL certificate
      community.crypto.x509_certificate:
        path: "{{ certs_dir }}intermediate/{{ signing_certificate }}/{{ signing_certificate }}.crt"
        ownca_path: "{{ certs_dir }}{{ organization }}.crt"
        ownca_privatekey_path: "{{ certs_dir }}{{ organization }}.key"
        ownca_privatekey_passphrase: "{{ ca_private_passphrase }}"
        csr_path: "{{ certs_dir }}intermediate/{{ signing_certificate }}/{{ signing_certificate }}.csr"
        ownca_not_after: "+3650d"
        ownca_not_before: "-1d"
        provider: ownca

    - name: "Create folder in intermediate folder for {{ common_name }}"
      ansible.builtin.file:
        state: directory
        name: "{{ certs_dir }}{{ signing_certificate }}/{{ common_name }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0750'

    - name: Generate client OpenSSL private key
      community.crypto.openssl_privatekey:
        path: "{{ certs_dir }}{{ signing_certificate }}/{{ common_name }}/{{ common_name }}.key"

    - name: Generate client OpenSSL Certificate Signing Request
      community.crypto.openssl_csr:
        path: "{{ certs_dir }}{{ signing_certificate }}/{{ common_name }}/{{ common_name }}.csr"
        privatekey_path: "{{ certs_dir }}{{ signing_certificate }}/{{ common_name }}/{{ common_name }}.key"
        country_name: "{{ country }}"
        organization_name: "{{ organization }}"
        email_address: "{{ admin_email }}"
        common_name: "{{ common_name }}"
        subject_alt_name: "{{ subject_alt_name }}"
        key_usage: "{{ client_key_usage }}"
        extended_key_usage: "{{ client_extended_key_usage }}"

    - name: Generate client OpenSSL certificate signed with our CA
      community.crypto.x509_certificate:
        path: "{{ certs_dir }}{{ signing_certificate }}/{{ common_name }}/{{ common_name }}.crt"
        ownca_path: "{{ certs_dir }}intermediate/{{ signing_certificate }}/{{ signing_certificate }}.crt"
        ownca_privatekey_path: "{{ certs_dir }}intermediate/{{ signing_certificate }}/{{ signing_certificate }}.key"
        ownca_privatekey_passphrase: "{{ ca_private_passphrase }}"
        ownca_not_after: "{{ ownca_not_after }}"
        ownca_not_before: "-1d"
        csr_path: "{{ certs_dir }}{{ signing_certificate }}/{{ common_name }}/{{ common_name }}.csr"
        provider: ownca

    - name: Create fullchain cert
      community.crypto.certificate_complete_chain:
        input_chain: "{{ lookup('ansible.builtin.file', certs_dir + signing_certificate + '/' + common_name + '/' + common_name + '.crt') }}"
        intermediate_certificates: "{{ certs_dir }}intermediate/{{ signing_certificate }}/{{ signing_certificate }}.crt"
        root_certificates: "{{ certs_dir }}{{ organization }}.crt"
      register: fullchain_cert

    - name: Write root chain (intermediates and root) to disk
      ansible.builtin.copy:
        dest: "{{ certs_dir }}{{ signing_certificate }}/{{ common_name }}/{{ common_name }}-fullchain.crt"
        content: "{{ ''.join(fullchain_cert.complete_chain) }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Generate PKCS#12 file
      community.crypto.openssl_pkcs12:
        action: export
        path: "{{ certs_dir }}{{ signing_certificate }}/{{ common_name }}/{{ common_name }}.p12"
        privatekey_path: "{{ certs_dir }}{{ signing_certificate }}/{{ common_name }}/{{ common_name }}.key"
        certificate_path: "{{ certs_dir }}{{ signing_certificate }}/{{ common_name }}/{{ common_name }}-fullchain.crt"
        friendly_name: "{{ common_name }}"
        state: present
