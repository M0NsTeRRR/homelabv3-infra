global:
  enabled: true
  tlsDisable: false

injector:
  enabled: false

server:
  networkPolicy:
    enabled: false

  statefulSet:
    annotations:
      reloader.stakater.com/auto: "true"

  extraEnvironmentVars:
    VAULT_CACERT: /vault/userconfig/vault-server-tls/ca.crt

  volumes:
    - name: userconfig-vault-server-tls
      secret:
        defaultMode: 420
        secretName: vault-server-tls
    - name: ca-certs
      configMap:
        name: homelab-ca

  volumeMounts:
    - mountPath: /vault/userconfig/vault-server-tls
      name: userconfig-vault-server-tls
      readOnly: true
    - name: ca-certs
      mountPath: /etc/ssl/certs/homelab.crt
      subPath: ca.crt
      readOnly: true

  dataStorage:
    enabled: true
    size: 20Gi
    mountPath: "/vault/data"
    storageClass: null
    accessMode: ReadWriteOnce
    annotations: {}

  image:
    tag: "1.18.0"

  service:
    ipFamilyPolicy: "PreferDualStack"

  readinessProbe:
    httpGet:
      scheme: HTTPS
      path: "/v1/sys/health?standbyok=true&sealedcode=204&uninitcode=204"
  livenessProbe:
    httpGet:
      scheme: HTTPS
      path: "/v1/sys/health?standbyok=true"
    initialDelaySeconds: 60

  auditStorage:
    enabled: true

  standalone:
    enabled: false

  ha:
    enabled: true
    replicas: 3
    raft:
      enabled: true

      config: |
        ui = true

        listener "tcp" {
          address = "[::]:8200"
          cluster_address = "[::]:8201"
          tls_cert_file = "/vault/userconfig/vault-server-tls/vault.crt"
          tls_key_file  = "/vault/userconfig/vault-server-tls/vault.key"

          telemetry {
            unauthenticated_metrics_access = true
          }
        }

        storage "raft" {
          path = "/vault/data"

          retry_join {
            leader_api_addr = "https://vault-0.vault-internal:8200"
            leader_ca_cert_file = "/vault/userconfig/vault-server-tls/ca.crt"
            leader_client_cert_file = "/vault/userconfig/vault-server-tls/vault.crt"
            leader_client_key_file  = "/vault/userconfig/vault-server-tls/vault.key"
          }

          retry_join {
            leader_api_addr = "https://vault-1.vault-internal:8200"
            leader_ca_cert_file = "/vault/userconfig/vault-server-tls/ca.crt"
            leader_client_cert_file = "/vault/userconfig/vault-server-tls/vault.crt"
            leader_client_key_file  = "/vault/userconfig/vault-server-tls/vault.key"
          }

          retry_join {
            leader_api_addr = "https://vault-2.vault-internal:8200"
            leader_ca_cert_file = "/vault/userconfig/vault-server-tls/ca.crt"
            leader_client_cert_file = "/vault/userconfig/vault-server-tls/vault.crt"
            leader_client_key_file  = "/vault/userconfig/vault-server-tls/vault.key"
          }
        }

        disable_mlock = true

        service_registration "kubernetes" {}

        telemetry {
          prometheus_retention_time = "30s"
          disable_hostname = true
        }

ui:
  enabled: true
  serviceType: "LoadBalancer"
  serviceIPFamilyPolicy: "PreferDualStack"
  annotations:
    metallb.universe.tf/loadBalancerIPs: 192.168.10.102,2a0c:b641:2c0:110::102

serverTelemetry:
  serviceMonitor:
    enabled: true
  prometheusRules:
    enabled: true
    rules:
      - alert: VaultSealed
        expr: 'vault_core_unsealed == 0'
        for: 0m
        labels:
          severity: critical
        annotations:
          summary: Vault sealed (instance {{ $labels.instance }})
          description: "Vault instance is sealed on {{ $labels.instance }}\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"

      - alert: VaultTooManyPendingTokens
        expr: 'avg(vault_token_create_count - vault_token_store_count) > 0'
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: Vault too many pending tokens (instance {{ $labels.instance }})
          description: "Too many pending tokens {{ $labels.instance }}: {{ $value | printf \"%.2f\"}}%\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"

      - alert: VaultTooManyInfinityTokens
        expr: 'vault_token_count_by_ttl{creation_ttl="+Inf"} > 3'
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: Vault too many infinity tokens (instance {{ $labels.instance }})
          description: "Too many infinity tokens {{ $labels.instance }}: {{ $value | printf \"%.2f\"}}%\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"

      - alert: VaultClusterHealth
        expr: 'sum(vault_core_active) / count(vault_core_active) <= 0.5'
        for: 0m
        labels:
          severity: critical
        annotations:
          summary: Vault cluster health (instance {{ $labels.instance }})
          description: "Vault cluster is not healthy {{ $labels.instance }}: {{ $value | printf \"%.2f\"}}%\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"