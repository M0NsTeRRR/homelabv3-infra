addLocal('0.0.0.0')
addLocal('::')

addDOHLocal('0.0.0.0', '/etc/dnsdist/ssl/{{ dnsdist_cert_filename }}', '/etc/dnsdist/ssl/{{ dnsdist_key_filename }}')
addDOHLocal('::', '/etc/dnsdist/ssl/{{ dnsdist_cert_filename }}', '/etc/dnsdist/ssl/{{ dnsdist_key_filename }}')

addTLSLocal('0.0.0.0', '/etc/dnsdist/ssl/{{ dnsdist_cert_filename }}', '/etc/dnsdist/ssl/{{ dnsdist_key_filename }}')
addTLSLocal('::', '/etc/dnsdist/ssl/{{ dnsdist_cert_filename }}', '/etc/dnsdist/ssl/{{ dnsdist_key_filename }}')

setACL({'0.0.0.0/0', '::/0'})

newServer({address='127.0.0.1:5300', pool='primary'})
newServer({address='[::1]:5300', pool='primary'})
newServer({address='127.0.0.1:5301', useProxyProtocol=true, pool='recursor'})
newServer({address='[::1]:5301', useProxyProtocol=true, pool='recursor'})



-- https://www.dnsdist.org/advanced/axfr.html
{% if inventory_hostname == ansible_play_hosts_all[0] %}
trustedSlave = newNMG()
{% for dnsdist_pdns_slave in ansible_play_hosts_all[1:] %}
trustedSlave:addMask("{{ hostvars[dnsdist_pdns_slave].ansible_default_ipv4.address }}/32")
trustedSlave:addMask("{{ hostvars[dnsdist_pdns_slave].ansible_default_ipv6.address }}/128")
{% endfor %}

-- Block SOA, AXFR and IXFR from IPs not in defined range
addAction(AndRule({OrRule({QTypeRule(DNSQType.SOA), QTypeRule(DNSQType.AXFR), QTypeRule(DNSQType.IXFR)}), NotRule(NetmaskGroupRule(trustedSlave))}), RCodeAction(DNSRCode.REFUSED))
addAction(OrRule({QTypeRule(DNSQType.SOA), QTypeRule(DNSQType.SOA), QTypeRule(DNSQType.AXFR), QTypeRule(DNSQType.IXFR)}), PoolAction("primary"))
{% else %}
-- this rule will disable the caching of responses for NOTIFY queries
addAction(OpcodeRule(DNSOpcode.Notify), SetSkipCacheAction())
-- Block Notify from IPs not in defined range
addAction(OrRule({OpcodeRule(DNSOpcode.Notify)}), PoolAction("primary"))
{% endif %}

addAction(AllRule(), PoolAction('recursor'))
